### python

import numpy as np
import pandas as pd
import scanpy as sc
import anndata as ad
import seaborn as sns
import celltypist
import matplotlib.pyplot as plt
import scanpy.external as sce
import infercnvpy as cnv
from scipy import sparse
from celltypist import models
import os

sc.settings.verbosity = 3   
sc.logging.print_header()
sc.settings.set_figure_params(dpi=300,dpi_save=600,facecolor='white')

adata = sc.read_h5ad('Pt_all_samples_RNA_CCR.h5ad')


### Figure 3A and Figure S4
    Figure 3A
    ### python
    sc.pl.umap(adata, color = ['Cell_types_0'],legend_fontsize=8,size = 2,legend_fontoutline=1,frameon=False)
    sc.pl.umap(adata, color = ['patient_ID'],legend_fontsize=8,size = 2,legend_fontoutline=1,frameon=False)
    sc.pl.umap(adata, color = ['Tissues'],legend_fontsize=8,size = 2,legend_fontoutline=1,frameon=False)
    
    ### Figure S4
    ### python
    sc.pl.umap(adata[adata.obs.Tissues == "Non-metastatic lymph nodes"], color = ['Cell_types_0'],legend_fontsize=8,size = 2,title='nLNs',legend_fontoutline=1,frameon=False)
    sc.pl.umap(adata[adata.obs.Tissues == "Metastatic lymph nodes"], color = ['Cell_types_0'],legend_fontsize=8,size = 2,title='mLNs',legend_fontoutline=1,frameon=False)
    sc.pl.umap(adata[adata.obs.Tissues == "Primary tumor"], color = ['Cell_types_0'],legend_fontsize=8,size = 2,title='Primary tumor',legend_fontoutline=1,frameon=False)
    
    sc.pl.umap(adata[adata.obs.Tissues == "Non-metastatic lymph nodes"], color = ['patient_ID'],legend_fontsize=8,size = 2,title='nLNs',legend_fontoutline=1,frameon=False)
    sc.pl.umap(adata[adata.obs.Tissues == "Metastatic lymph nodes"], color = ['patient_ID'],legend_fontsize=8,size = 2,title='mLNs',legend_fontoutline=1,frameon=False)
    sc.pl.umap(adata[adata.obs.Tissues == "Primary tumor"], color = ['patient_ID'],legend_fontsize=8,size = 2,title='Primary tumor',legend_fontoutline=1,frameon=False)
    
    sc.pl.umap(adata[adata.obs.Tissues == "Non-metastatic lymph nodes"], color = ['Tissues'],legend_fontsize=8,size = 2,title='nLNs',legend_fontoutline=1,frameon=False)
    sc.pl.umap(adata[adata.obs.Tissues == "Metastatic lymph nodes"], color = ['Tissues'],legend_fontsize=8,size = 2,title='mLNs',legend_fontoutline=1,frameon=False)
    sc.pl.umap(adata[adata.obs.Tissues == "Primary tumor"], color = ['Tissues'],legend_fontsize=8,size = 2,title='Primary tumor',legend_fontoutline=1,frameon=False)


### Figure S5A
    ### python
    cnv.io.genomic_position_from_gtf("gencode.v42.annotation.gtf",adata)
    cnv.tl.infercnv(
        adata,
        reference_key="Cell_types_0",
        reference_cat=["B cells",'T cells',"DC","Macrophages","pDC",],window_size=250)
    cnv.pl.chromosome_heatmap(adata, groupby="Cell_types_0",save='.pdf')


### Figure 3B
    ### python
    marker_genes_dict1 = {
        'T cells':['CD3D','CD3E'],
        'B cells':['MS4A1','CD79B'],
        'Plasma cells':['IGHG1','MZB1'],
        'Malignant cells':['EPCAM','KRT17'],
        'Macrophages':['CD68','CD163'],
        'DC':['FCER1A','CD1C'],
        'pDC':['LILRA4','IRF7'],
        'Mast cells':['KIT','CPA3'],
        'Fibroblasts':['COL1A2','FGF7'],
        'Endothelial cells':['PECAM1','VWF'],
    }
    adata.layers['scaled'] = sc.pp.scale(adata, copy=True).X
    sc.pl.matrixplot(adata, marker_genes_dict1, 'Cell_types_0', dendrogram=True,colorbar_title='mean z-score', layer='scaled', vmin=-2, vmax=2, cmap='RdBu_r',save='.pdf')


### Figure 3C
    ### python
    adata.obs.to_csv('Tissues_all_cells_obs.csv')
    ### R
    library(ggplot2)
    library(reshape2)
    df <- read.csv('Tissues_all_cells_obs.csv')
    df1 <- table(df$Tissues,df$Cell_types_0)
    freq.table <-prop.table(x=df1,margin=2)
    tr <- melt(freq.table)
    colnames(tr) <- c("Tissues","Cell_types_0","fraction")
    tr$Cell_types_0=as.character(tr$Cell_types_0)
    tr$Cell_types_0=factor(tr$Cell_types_0,levels = c('Fibroblasts','Endothelial cells','Malignant cells','Macrophages','DC','Plasma cells','Mast cells','pDC','B cells','T cells'))
    
    p <- ggplot(tr,aes(x=Cell_types_0,y=fraction,fill=Tissues))+geom_bar(stat="identity",width=0.9)+theme_classic()
    p1 <- p+ylab ('Fraction of Cells')+scale_y_continuous(expand=c(0,0))+theme (axis.ticks.x = element_blank())
    p1+coord_flip()
    
    b=factor(df$Cell_types_0,levels = c('Fibroblasts','Endothelial cells','Malignant cells','Macrophages','DC','Plasma cells','Mast cells','pDC','B cells','T cells'))
    pp <- ggplot(df,aes(x=b))+geom_bar(width=0.9,fill = "steelblue", color ="steelblue")
    pp + theme_minimal()+coord_flip()


### Figure S5B
    ### python
    adata = adata[~adata.obs.Cell_types_0.isin(['Malignant cells'])].copy()
    adata.obs.to_csv('Pt_LN_5patients_no_malignant_obs_3.csv')
    ### R
    library(ggplot2)
    library(reshape2)
    df <- read.csv('Pt_LN_5patients_no_malignant_obs_3.csv')
    df1 <- table(df$Cell_types_0,df$patient_ID)
    freq.table <-prop.table(x=df1,margin=2)
    write.csv(freq.table, file = 'Pt_LN_5patients_no_malignant_obs_3_count.csv')


### Figure 3D
    ### python
    df1 = pd.crosstab(adata.obs['Cell_types'], adata.obs['patient_ID'], margins=False)
    freq_table = df1.div(df1.sum(axis=0), axis=1)
    freq_table_df = pd.DataFrame(freq_table)
    
    Non_metastatic = ['Pt_59_LN_negative_RNA', 'Pt_63_LN_negative_RNA', 'Pt_64_LN_negative_RNA', 'Pt_65_LN_negative_RNA','Pt_68_LN_negative_RNA']
    freq_table_df['Non_metastatic'] = freq_table_df[Non_metastatic].mean(axis=1)
    
    Metastatic = ['Pt_41_LN_positive_RNA', 'Pt_49_LN_positive_RNA', 'Pt_59_LN_positive_RNA','Pt_64_LN_positive_RNA','Pt_68_LN_positive_RNA']
    freq_table_df['Metastatic'] = freq_table_df[Metastatic].mean(axis=1)
    
    Primary_tumor = ['Pt_41_post_tumor_RNA', 'Pt_49_post_tumor_RNA', 'Pt_59_post_tumor_RNA','Pt_64_post_tumor_RNA','Pt_68_post_tumor_RNA']
    freq_table_df['Primary_tumor'] = freq_table_df[Primary_tumor].mean(axis=1)
    df = freq_table_df.iloc[:, -3:]
    
    normalized_df = np.log10(df.divide(df['Non_metastatic'], axis=0))
    cax = plt.matshow(normalized_df, cmap='RdBu_r', vmin=-1.5, vmax=1.5)
    circle_size_factor = 2
    for i in range(df.shape[0]):
        for j in range(df.shape[1]):
            circle_size = df.iloc[i, j] * circle_size_factor
            circle = plt.Circle((j, i), circle_size, color='black', fill=False)
            plt.gca().add_patch(circle)
            rect = plt.Rectangle((j - 0.5, i - 0.5), 1, 1, color='white', linewidth=1, fill=False)
            plt.gca().add_patch(rect)
    plt.xticks(range(df.shape[1]), df.columns, rotation=45)
    plt.yticks(range(df.shape[0]), df.index)
    plt.gca().xaxis.tick_top()
    plt.colorbar(cax, shrink=0.5)
    plt.savefig('.pdf', format='pdf')
    plt.show()


### Figure 3E
    ### python
    adata = adata[adata.obs.Cell_types_0.isin(['T cells'])].copy()
    adata = adata[adata.obs.Cell_types_1.isin(['CD8+ T cells'])].copy()
    sc.pl.umap(adata[adata.obs.Tissues == "Non-metastatic lymph nodes"], color = ['Cell_types'],legend_fontsize=8,size = 30,title='Non-metastatic lymph nodes',legend_fontoutline=1)
    sc.pl.umap(adata[adata.obs.Tissues == "Metastatic lymph nodes"], color = ['Cell_types'],legend_fontsize=8,size = 30,title='Metastatic lymph nodes',legend_fontoutline=1)
    sc.pl.umap(adata[adata.obs.Tissues == "Primary tumor"], color = ['Cell_types'],legend_fontsize=8,size = 30,title='Primary tumor',legend_fontoutline=1)
    
    adata.obs.to_csv('Pt_CD8_obs.csv')
    ### R
    library(ggplot2)
    library(reshape2)
    df <- read.csv('Pt_CD8_obs.csv')
    df1 <- table(df$Cell_types,df$Tissues)
    freq.table <-prop.table(x=df1,margin=2)
    tr <- melt(freq.table)
    colnames(tr) <- c("Tissues","Cell_types","fraction")
    tr$Cell_types_0=as.character(tr$Cell_types)
    
    p <- ggplot(tr,aes(x=Cell_types,y=fraction,fill=Tissues))+geom_bar(stat="identity",width=0.9)+theme_classic()
    p1 <- p+ylab ('Fraction of Cells')+scale_y_continuous(expand=c(0,0))+theme (axis.ticks.x = element_blank())
    p1+coord_flip()


### Figure 3F
    ### python
    adata = adata[adata.obs.Cell_types_0.isin(['T cells'])].copy()
    adata = adata[adata.obs.Cell_types_1.isin(['CD8+ T cells'])].copy()
    gene_list=['GNLY','GZMB','GZMA','NKG7','PRF1','NEAT1','CCL5','KLRD1','KLRC1','CCL3','HAVCR2','HOPX','KLRC2','CD63','CLEC2B','CTSW',
                'CEBPD','LGALS1','SAMSN1','CCL4','AC092580.4','ACP5','LITAF','PTMS','APOBEC3G','TNFRSF18','SH3BGRL3','RPS26','LDHA','CKLF']
    sc.pp.scale(adata)
    sc.tl.score_genes(adata, gene_list)
    sc.pl.violin(adata, ['score'], groupby='Tissues',ylabel='pTNI16 (cytotoxicity)',
                 order = ["Non-metastatic lymph nodes", "Metastatic lymph nodes", "Primary tumor"],stripplot=False, inner='box',rotation=90,save='.pdf')


### Figure 4A-C and Figure S6
    ### python
    results_file1 = '5patients_LN_neg_RNA.h5ad'
    results_file2 = '5patients_LN_pos_RNA.h5ad'
    results_file3 = '5patients_primary_tumor_RNA.h5ad'
    
    adata1 = adata[adata.obs.Tissues.isin(['Non-metastatic lymph nodes'])].copy()
    adata2 = adata[adata.obs.Tissues.isin(['Metastatic lymph nodes'])].copy()
    adata3 = adata[adata.obs.Tissues.isin(['Primary tumor'])].copy()
    
    adata1.write(results_file1, compression="gzip")
    adata2.write(results_file2, compression="gzip")
    adata3.write(results_file3, compression="gzip")
    
    ### R
    library(dplyr)
    library(patchwork)
    library(ggplot2)
    library(igraph)
    library(svglite)
    library(ggalluvial)
    library(NMF)
    library(Seurat)
    library(CellChat)
    library(ComplexHeatmap)
    library(scRUtils)
    library(wordcloud)
    library(reticulate)
    library(Matrix)
    library(methods)
    library(circlize)
    library(viridis)
    
    options(stringsAsFactors = FALSE)
    setAs("dgRMatrix", to = "dgCMatrix", function(from){as(as(from, "CsparseMatrix"), "dgCMatrix")})
    ad <- import("anndata", convert = FALSE)
    sample_names <- c("5patients_primary_tumor_RNA.h5ad", "5patients_LN_pos_RNA.h5ad", "5patients_LN_neg_RNA.h5ad")
    
    for (sample_name in sample_names) 
    {
      ad_object <- ad$read_h5ad(sample_name)
      data.input <- t(py_to_r(ad_object$X))
      rownames(data.input) <- rownames(py_to_r(ad_object$var))
      colnames(data.input) <- rownames(py_to_r(ad_object$obs))
      meta.data <- py_to_r(ad_object$obs)
      meta <- meta.data
      cellchat <- createCellChat(object = as(data.input, "dgCMatrix"), meta = meta, group.by = "Cell_types_0")
      CellChatDB <- CellChatDB.human
      showDatabaseCategory(CellChatDB)
      dplyr::glimpse(CellChatDB$interaction)
      CellChatDB.use <- CellChatDB
      cellchat@DB <- CellChatDB.use
    
      cellchat <- subsetData(cellchat)
      future::plan("multiprocess", workers = 4)
      cellchat <- identifyOverExpressedGenes(cellchat)
      cellchat <- identifyOverExpressedInteractions(cellchat)
      cellchat <- projectData(cellchat, PPI.human)
    
      options(future.globals.maxSize= 1000*1024^2)
      cellchat <- computeCommunProb(cellchat)
      cellchat <- filterCommunication(cellchat, min.cells = 10)
      cellchat <- computeCommunProbPathway(cellchat)
      cellchat <- aggregateNet(cellchat)
      
      cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP") 
      gg1 <- netAnalysis_signalingRole_scatter(cellchat)
      ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing")
      ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming")
      ht1 + ht2
     
      cellchat <- computeNetSimilarity(cellchat, type = "functional")
      cellchat <- netEmbedding(cellchat, type = "functional")
      cellchat <- netClustering(cellchat, type = "functional")
      netVisual_embedding(cellchat, type = "functional", label.size = 3.5)
    
      sample_name <- gsub("\\.h5ad$", "", sample_name)
      file_name <- paste0(sample_name, "_cellchat.rds")
      saveRDS(cellchat, file = file_name)
      cat(paste("Saved ", sample_name, " to ", file_name, "\n"))
    }
    
    cellchat.tumor <- readRDS("5patients_primary_tumor_RNA_cellchat.rds")
    cellchat.LN_pos <- readRDS("5patients_LN_pos_RNA_cellchat.rds")
    cellchat.LN_neg <- readRDS("5patients_LN_neg_RNA_cellchat.rds")
    cellchat.tumor <- updateCellChat(cellchat.tumor)
    cellchat.LN_pos <- updateCellChat(cellchat.LN_pos)
    cellchat.LN_neg <- updateCellChat(cellchat.LN_neg)
    
    group.new = levels(cellchat.LN_pos@idents)
    cellchat.LN_neg <- liftCellChat(cellchat.LN_neg, group.new)
    object.list <- list(LN_neg = cellchat.LN_neg, LN_pos = cellchat.LN_pos,tumor = cellchat.tumor)
    cellchat <- mergeCellChat(object.list, add.names = names(object.list), cell.prefix = TRUE)
    cellchat
    
    ### Figure S6A
    gg1 <- compareInteractions(cellchat, show.legend = F, group = c(1,2,3),group.levels = c(1,2,3))+coord_cartesian(ylim = c(0, 3000))
    gg2 <- compareInteractions(cellchat, show.legend = F, group = c(1,2,3),group.levels = c(1,2,3), measure = "weight")
    gg1 + gg2
    
    ### Figure 4B
    gg1 <- netVisual_heatmap(cellchat)
    gg2 <- netVisual_heatmap(cellchat,comparison = c(3, 2) ,measure = "weight")
    gg2
    
    ### Figure 4A
    num.link <- sapply(object.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
    weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
    gg <- list()
    for (i in 1:length(object.list)) {
      gg[[i]] <- netAnalysis_signalingRole_scatter(object.list[[i]], title = names(object.list)[i], weight.MinMax = weight.MinMax) +
        coord_cartesian(xlim = c(0, 12),ylim = c(0, 10))
    }
    patchwork::wrap_plots(plots = gg)
    
    ### Figure S6B
    gg1 <- rankNet(cellchat, mode = "comparison", comparison = c(2,3),stacked = T, do.stat = TRUE)
    gg2 <- rankNet(cellchat, mode = "comparison", comparison = c(2,3),stacked = F, do.stat = TRUE)
    gg1 + gg2
    ### Figure S6C
    gg1 <- rankNet(cellchat, mode = "comparison", comparison = c(2,1),stacked = T, do.stat = TRUE)
    gg2 <- rankNet(cellchat, mode = "comparison", comparison = c(2,1),stacked = F, do.stat = TRUE)
    gg1 + gg2
    ### Figure S6D
    gg1 <- rankNet(cellchat, mode = "comparison", comparison = c(2,1,3),stacked = T, do.stat = TRUE)
    gg2 <- rankNet(cellchat, mode = "comparison", comparison = c(2,1,3),stacked = F, do.stat = TRUE)
    gg1 + gg2
    
    ### Figure 4C
    pathways.show <- c("SPP1") 
    par(mfrow = c(1,2), xpd=TRUE)
    ht <- list()
    for (i in 1:length(object.list)) {
      ht[[i]] <- netVisual_heatmap(object.list[[i]], signaling = pathways.show, color.heatmap = "Reds",title.name = paste(pathways.show, "signaling ",names(object.list)[i]) + netVis_heatmap(object.list[[i]],heatmap_colors_max = 0.16))
    }
    
    ComplexHeatmap::draw(ht[[1]] +ht[[2]] + ht[[3]], ht_gap = unit(0.5, "cm"))
    
    ### Figure S6E
    cellchat <- readRDS('5patients_primary_tumor_RNA_cellchat.rds')
    pathways.show <- c("SPP1")
    netVisual_bubble(cellchat, sources.use = 5, targets.use = 6, signaling = c("SPP1"), remove.isolate = FALSE)
    
    ### Figure S6F
    cellchat <- readRDS('5patients_LN_pos_RNA_cellchat.rds')
    pathways.show <- c("SPP1")
    netVisual_bubble(cellchat, sources.use = 5, targets.use = 4, signaling = c("SPP1"), remove.isolate = FALSE)


### Figure 4D
    ### python
    adata = adata[adata.obs.Tissues.isin(['Primary tumor','Metastatic lymph nodes'])].copy()
    adata = adata[adata.obs.Cell_types_0.isin(['Macrophages'])].copy()
    adata.layers['X']=adata.X
    data=pd.concat([adata.to_df(layer="X"),adata.obs],axis=1)
    data = data[['Tissues','SPP1']]
    fig = sns.violinplot(data=data, x="Tissues", y="SPP1")
    fig.figure.set_size_inches(4, 4)
    from scipy.stats import ttest_ind
    type1 = data[data['Tissues']=='Metastatic lymph nodes']
    type2 = data[data['Tissues']=='Primary tumor']
    res = ttest_ind(type1['SPP1'], type2['SPP1'])
    print(res)


### Figure 4E-F
    ### python
    adata = adata[adata.obs.Tissues.isin(['Primary tumor','Metastatic lymph nodes'])].copy()
    adata.obs['Tissues'] = pd.Categorical(adata.obs['Tissues'], categories=["Metastatic lymph nodes","Primary tumor"], ordered=True)
    indices = adata.obs.sort_values(['Cell_types_0', 'Tissues']).index
    adata = adata[indices,:]
    bdata = adata[adata.obs.Cell_types_0 == "Fibroblasts"].copy()
    bdata
    gs_list = ['GO_Biological_Process_2021']
    import time
    t1 = time.time()
    res = gp.gsea(data=bdata.to_df().T, # row -> genes, column-> samples
            gene_sets=gs_list,
            cls=bdata.obs.Tissues,
            permutation_num=1000,
            permutation_type='phenotype',
            outdir=None,
            method='s2n', # signal_to_noise
            threads= 200)
    t2=time.time()
    print(t2-t1)
    res.res2d.to_csv('GSEA_LN_pos_vs_primary_Fibroblasts_GO_Biological_Process_2021.csv')
    
    ### Figure 4F
    terms = res.res2d.Term
    axs = res.plot(terms=terms[10],figsize = (6, 5.5))
    plt.savefig('.pdf', format='pdf')
    
    ### Figure 4E
    encodings = ['utf-8', 'gbk', 'iso-8859-1']
    for encoding in encodings:
        try:
            data = pd.read_csv('GSEA_LN_pos_vs_primary_Fibroblasts_GO_Biological_Process_2021.csv', encoding=encoding).iloc[:20]
            break
        except UnicodeDecodeError:
            continue
    
    data['Term'] = data['Term'].apply(lambda x: x.split('__')[-1].split('(')[0].strip().capitalize())
    plt.figure(figsize=(3, 5))
    sns.barplot(x="NES", y="Term", data=data, color='skyblue', linewidth=1)  
    plt.xlim(2.5, 3.0)
    plt.xlabel('NES')
    plt.ylabel('')
    plt.tick_params(axis='y', which='both', left=False, right=False, labelleft=False)  
    plt.tight_layout()
    for index, value in enumerate(data['Term']):
        plt.text(3.05, index, value, ha='left', va='center', fontsize=14)
    plt.savefig('plot.pdf')
    plt.show()

### Figure 5A-B
    ### python
    adata = adata[adata.obs.Tissues.isin(['Primary tumor','Metastatic lymph nodes'])].copy()
    adata.obs['Tissues'] = pd.Categorical(adata.obs['Tissues'], categories=["Metastatic lymph nodes","Primary tumor"], ordered=True)
    indices = adata.obs.sort_values(['Cell_types_0', 'Tissues']).index
    adata = adata[indices,:]
    bdata = adata[adata.obs.Cell_types_0 == "Macrophages"].copy()
    bdata
    gs_list = ['MSigDB_Hallmark_2020']
    import time
    t1 = time.time()
    res = gp.gsea(data=bdata.to_df().T, # row -> genes, column-> samples
            gene_sets=gs_list,
            cls=bdata.obs.Tissues,
            permutation_num=1000,
            permutation_type='phenotype',
            outdir=None,
            method='s2n', # signal_to_noise
            threads= 200)
    t2=time.time()
    print(t2-t1)
    res.res2d.to_csv('GSEA_LN_pos_vs_primary_Macrophages_MSigDB_Hallmark_2020.csv')
    
    ### Figure 5A
    terms = res.res2d.Term
    axs = res.plot(terms=terms[12],figsize = (6, 5.5))
    plt.savefig('.pdf', format='pdf')
    
    ### Figure 5B
    data = pd.read_csv('GSEA_LN_pos_vs_primary_Macrophages_MSigDB_Hallmark_2020_NES_POSITIVE_TOP10.csv')
    fig, ax = plt.subplots(figsize=(4, 4))
    sns.barplot(x="NES", y="Term",width=0.8, data=data,palette='Set1')
    plt.axis([0,3.5,-0.5,9.5])
    plt.ylabel('')
    ax.tick_params(axis='y',labelsize=10)
    plt.savefig('plot.pdf')

### Figure 5C
    ### python
    adata = adata[adata.obs.Tissues.isin(['Primary tumor','Metastatic lymph nodes'])].copy()
    adata = adata[adata.obs.Cell_types_0.isin(["Macrophages"])].copy()
    Annotation = {    
        'Macro_SPP1':'SPP1_high',
        'Macro_MKI67':'SPP1_high',
        'Macro_KRT14':'SPP1_low',
        'Macro_IL1B':'SPP1_low',
        'Macro_C1QC':'SPP1_low',
        'Macro_Ribo':'SPP1_low',
        'Macro_CD3D':'SPP1_low',
        'Macro_IFN':'SPP1_low',
        'Macro_IGFBP7':'SPP1_low',
        'Macro_COL1A2':'SPP1_low',
    }
    adata.obs ['SPP1'] = adata.obs['Cell_types'].map(Annotation).astype('category')
    adata.obs['SPP1'] = pd.Categorical(adata.obs['SPP1'], categories=["SPP1_high","SPP1_low"], ordered=True)
    indices = adata.obs.sort_values(['Cell_types_0', 'SPP1']).index
    adata = adata[indices,:]
    bdata = adata[adata.obs.Cell_types_0 == "Macrophages"].copy()
    bdata
    gs_list = ['GO_Biological_Process_2021', 'GO_Cellular_Component_2021', 'GO_Molecular_Function_2021','KEGG_2021_Human','MSigDB_Hallmark_2020']
    import time
    t1 = time.time()
    res = gp.gsea(data=bdata.to_df().T, # row -> genes, column-> samples
            gene_sets=gs_list,
            cls=bdata.obs.SPP1,
            permutation_num=1000,
            permutation_type='phenotype',
            outdir=None,
            method='s2n', # signal_to_noise
            threads= 200)
    t2=time.time()
    print(t2-t1)
    terms = res.res2d.Term
    axs = res.plot(terms=terms[1671],figsize = (6, 5.5))
    plt.savefig('.pdf', format='pdf')


### Figure 5D-E
    ### python
    import loompy as lp
    adata = adata[adata.obs.Tissues.isin(['Primary tumor','Metastatic lymph nodes'])].copy()
    adata = adata[adata.obs.Cell_types_0.isin(["Macrophages"])].copy()
    row_attrs = {
        "Gene": np.array(adata.var_names) ,
    }
    col_attrs = {
        "CellID": np.array(adata.obs_names) ,
        "nGene": np.array( np.sum(adata.X.transpose()>0 , axis=0)).flatten() ,
        "nUMI": np.array( np.sum(adata.X.transpose() , axis=0)).flatten() ,
    }
    lp.create( 'Pyscenic_5_Patients_Macrophages_Primary_Tumor_vs_mLNs.loom', adata.X.transpose(), row_attrs, col_attrs)

###LUNIX










    ### python
    import os, glob, re, pickle
    from functools import partial
    from collections import OrderedDict
    import operator as op
    from cytoolz import compose
    
    import pandas as pd
    import seaborn as sns
    import numpy as np
    import scanpy as sc
    import anndata as ad
    import matplotlib as mpl
    import matplotlib.pyplot as plt
    import loompy as lp
    
    import json
    import base64
    import zlib
    
    from pyscenic.export import export2loom, add_scenic_metadata
    from pyscenic.utils import load_motifs
    from pyscenic.transform import df2regulons
    from pyscenic.aucell import aucell
    from pyscenic.binarization import binarize
    from pyscenic.rss import regulon_specificity_scores
    from pyscenic.plotting import plot_binarization, plot_rss
    from pyscenic.cli.utils import load_signatures
    from adjustText import adjust_text
    from IPython.display import HTML, display
    
    sc.settings.verbosity = 3   
    sc.logging.print_header()
    sc.settings.set_figure_params(dpi=600, facecolor='white',frameon=False,color_map ='Blues')
    
    
    adata = adata[adata.obs.Tissues.isin(['Primary tumor','Metastatic lymph nodes'])].copy()
    adata = adata[adata.obs.Cell_types_0.isin(["Macrophages"])].copy()
    lf = lp.connect( 'Pyscenic_5_Patients_Macrophages_SCENIC.loom', mode='r', validate=False )
    auc_mtx = pd.DataFrame( lf.ca.RegulonsAUC, index=lf.ca.CellID)
    sig = load_signatures('reg.Pyscenic_5_Patients_Macrophages.csv')
    adata = add_scenic_metadata(adata, auc_mtx, sig)
    rss = regulon_specificity_scores(auc_mtx, adata.obs.Tissues)
    
    ### Figure 5D
    cats = sorted(list(set(adata.obs['Tissues'])))
    fig = plt.figure(figsize=(6,5))
    for c,num in zip(cats, range(1,len(cats)+1)):
        x=rss.T[c]
        ax = fig.add_subplot(1,2,num)
        plot_rss(rss, c, top_n=5, max_n=None, ax=ax)
        ax.set_ylim( x.min()-(x.max()-x.min())*0.05 , x.max()+(x.max()-x.min())*0.05 )
        for t in ax.texts:
            t.set_fontsize(10)
        ax.set_ylabel('')
        ax.set_xlabel('')
        adjust_text(ax.texts, autoalign='xy', ha='right', va='bottom', arrowprops=dict(arrowstyle='-',color='lightgrey'), precision=0.001 )
     
    fig.text(0.5, 0.0, 'Regulon', ha='center', va='center', size='x-large')
    fig.text(0.00, 0.5, 'Regulon specificity score (RSS)', ha='center', va='center', rotation='vertical', size='x-large')
    plt.tight_layout()
    plt.rcParams.update({
        'figure.autolayout': True,
            'figure.titlesize': 'large' ,
            'axes.labelsize': 'medium',
            'axes.titlesize':'medium',
            'xtick.labelsize':'medium',
            'ytick.labelsize':'medium'
            })
    plt.savefig('plot.pdf')
    
    ### Figure 5E
    sc.pl.violin(adata, ['Regulon(ATF4(+))'], groupby='Tissues', stripplot=False, inner='box') 
